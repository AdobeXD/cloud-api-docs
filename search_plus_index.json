{"./":{"url":"./","title":"Overview","keywords":"","body":"Cloud Content APIs As of February 2022, new access requests for the XD Cloud Content APIs are now closed. In order to focus on the future of creativity and design in a Web-first world, the Adobe XD team is hard at work building a foundation for a new ecosystem of Web tools and APIs. Developers with existing access to the XD Cloud Content APIs will retain access, and their integrations will continue to function as usual at this time. Please use this page as a reference for any further communication regarding the status of the APIs and its future alternatives. Connect XD design work to your product or service XD Cloud Content APIs let you integrate design work created in Adobe XD with environments where stakeholders and clients spend time, like project management tools, storage services, and beyond. --> Quick start: make your first call Crack open your terminal and get ready to make your first cURL call. The XD Cloud Content API will provide you with metadata and rendition URLs in a handy JSON response. Start coding "},"integrate.html":{"url":"integrate.html","title":"Integrate","keywords":"","body":"Integrate Thanks for choosing to integrate with the XD Cloud Content APIs. We have put together some helpful documentation here to help you get started on your integration. Quick start Endpoint References Samples Secret handling best practices "},"tutorials/quick-start.html":{"url":"tutorials/quick-start.html","title":"Quick Start","keywords":"","body":"Quick Start: Make your first API call Let’s walk through making your first XD Cloud Content API call together. We'll keep things simple in this tutorial and use the command line tool cURL to make a request call. At the end of the tutorial, we'll suggest some next steps for going deeper with the XD Cloud Content APIs. Prerequisites Basic knowledge of Command Line Interfaces and APIs A text editor to write your code in (like VSCode, Sublime Text, Brackets, Atom, etc) Development Steps 0. Get a client ID and client secret Before you start, you'll want to request a client ID and client secret by filling out this form. If approved, you will be assigned a unique client ID and client secret, which can be used to make API calls. 1. Decide whether your app will access private cloud docs or not XD cloud documents are either private or public, depending on how the user has chosen to share them. If you are building an integration that requires access to private XD cloud ducments, your app will need an access token which can be obtained through an OAuth integration. During this OAuth workflow, users will be asked to authorize your app to access private cloud documents. API Key API Secret Access Token Public Cloud Docs Required Not Required Not Required Private Cloud Docs Required Required Required Note that if your app tries to access a private XD cloud document without an access token, Cloud Content APIs will return the following error: { \"error\": { \"message\": \"Wrong/Missing authorization information\" } } 2. Get the document URL You will need a document URL created from an XD document. In order to create a link, open Adobe XD and follow the steps below. First, click on the \"Share\" button at the top right corner and select \"Share for Review\": You will be asked to configure some settings. After choosing the right options for you, click on the \"Create Link\" button: After creating the link successfully, you will be able to copy the link to the clipboard: We'll use that link in the next step. 3. Find out what API endpoint can be used for a document URL Send an OPTIONS call and read the response header to learn what API calls can be made for a particular XD document URL. Refer to the required headers and parameters in the endpoint references page. curl -I -X OPTIONS -H \"x-api-key: YOUR-API-KEY\" -H \"X-AdobeXD-Link: https://xd.adobe.com/view/21652643-762a-41c6-5cd9-6342060e8aff-5754/\" https://xdce.adobe.io/v2/api This should return a response header like this: Access-Control-Allow-Headers →Origin, Content-Type, Accept, X-Api-Key, X-AdobeXD-Link, User-Agent Access-Control-Allow-Methods →OPTIONS Access-Control-Allow-Origin →* Access-Control-Expose-Headers →x-request-id, Content-Type, Content-Length, Link Connection →keep-alive Content-Length →0 Content-Type →application/json; charset=utf-8 Date →Mon, 14 Oct 2019 20:57:24 GMT Link →; rel=document Server →openresty Strict-Transport-Security →max-age=15552000; includeSubDomains Vary →Accept-Encoding X-Content-Type-Options →nosniff X-DNS-Prefetch-Control →off X-Download-Options →noopen X-Frame-Options →SAMEORIGIN X-Request-Id →gJeLsvCSjgTXhhDEp8uGMa0rnBrNeZXo X-XSS-Protection →1; mode=block The value of the Link key is the endpoint you can use to make further API calls. In this example, that value is: /v2/document/21652643-762a-41c6-5cd9-6342060e8aff-5754 4. Make a GET call to the document endpoint Now that you've retrieved the exact endpoint, you can make a GET call to the API. Refer to the required headers and parameters in the endpoint references page. curl -H \"x-api-key: YOUR-API-KEY\" https://xdce.adobe.io/v2/document/21652643-762a-41c6-5cd9-6342060e8aff-5754 This will return a JSON response that contains various data about the document, including the following and more: id name thumbnail publisher artboardCount artboards homeArtboardId version lastupdated history assetID includesDevelopmentData You can leverage this response data in your integration as-is. Or, in some cases, you can use the data to dig deeper. We'll look how to do that with the artboards data in the next step. 4. Make a GET call to the artboard endpoint The response we received above contains the artboards key with an array value of artboard objects. Each artboard object contains a unique id. You can use this value to make a GET call to the artboard endpoint. Note that you need to chain the artboard URL to the document URL used in the previous step. Refer to the required headers and parameters in the endpoint references page. curl -H \"x-api-key: YOUR-API-KEY\" https://xdce.adobe.io/v2/document/21652643-762a-41c6-5cd9-6342060e8aff-5754/artboard/5dec1809-bf44-4e9b-aef5-6e46e8aa18e9 This will return a response that contains various data about a given artboard, including: id name resourceAPI thumbnail bounds viewportBounds triggers parent Congratulations on making your first couple of calls to the XD Cloud Content APIs! Next Steps Now you're ready to move forward in building you integration with XD Cloud Content APIs. Browse the endpoint references See working code in our samples "},"reference/":{"url":"reference/","title":"Endpoint References","keywords":"","body":"Endpoint References GET API's to discover and fetch published specs and prototypes the client can access /v2/api OPTIONS Summary: Discovery API to get Cloud Content API entry point for given publish link Description: discovery API for a given published URL as header parameter Parameters Name Located in Description Required Schema X-AdobeXD-Link header published XD artefact link to discover corresponding Cloud Content API endpoint Yes string Responses Code Description 200 OK 403 Api key is invalid 422 X-AdobeXD-Link in request header has missing/invalid published URL /v2/document/{linkID} GET Summary: Document API to get latest version of link identified by {linkID} Description: fetch manifest of link identified by {linkID} Parameters Name Located in Description Required Schema linkID path pass an ID to fetch a particular link's manifest Yes string version query version of spec to be fetched No string Accept header media type and schema version. Please use the fully qualified Accept header like in example for consistent response. If the schema version is not present, the latest version of the response will be returned No string Responses Code Description 200 OK 401 Specified resource not found or not authorised / Wrong or missing authorisation 404 Specified resource not found 500 internal server error 504 Cannot connect to data normalizer / Cannot connect to Link Services / Cannot connect to Storage Services / Cannot connect to Community Platform /v2/document/{linkID}/artboard/{artboardID} GET Summary: get artboard identified by {artboardID} from link identified by {linkID} Description: fetch an artboard identified by {artboardID} from link identified by {linkID} Parameters Name Located in Description Required Schema linkID path pass an ID to fetch a particular link's data Yes string artboardID path pass an ID to fetch a particular artboard of the link Yes string version query version of primary resource from where the artboard has to be fetched No string Accept header media type and schema version. Please use the fully qualified Accept header like in example for consistent response. If the schema version is not present, the latest version of the response will be returned No string Responses Code Description 200 OK 401 Specified resource not found or not authorised / Wrong or missing authorisation 404 Specified resource not found 500 internal server error 504 Cannot connect to data normalizer / Cannot connect to Link Services / Cannot connect to Storage Services / Cannot connect to Community Platform "},"reference/faq.html":{"url":"reference/faq.html","title":"FAQ","keywords":"","body":"FAQ Below you'll find answers to some frequently asked questions. How can I request an access token? As of February 2022, new token requests for the XD Cloud Content APIs are closed. In order to focus on the future of creativity and design in a Web-first world, the Adobe XD team is hard at work building a foundation for a new ecosystem of Web tools and APIs. Developers with existing access to the XD Cloud Content APIs will retain access, and integrations will continue to function. What rate limits are there on API calls? XD Cloud Content API integrations are limited to no more than 10 calls per second. Do artboard thumbnails (renditions) have a lifespan? Thumbnail URLs returned by the Cloud Content APIs are only live for 24 hours. Make sure that your application sends a new request to receive updated thumbnail URLs. Is it possible to access private XD cloud documents through these APIs? Yes, provided that the user grants you access via OAuth. However, it is important to note that only private cloud documents created by individual users are accessible. Private cloud documents created by enterprise users will be supported in the future. What happens if I request a cloud document that has been deleted? If the cloud document or its published link is deleted by the author, the API will return the following body in the response: { \"error\": { \"message\": \"Specified resource not found or not authorized\" } } "},"samples/":{"url":"samples/","title":"Samples","keywords":"","body":"Samples Vist our GitHub repo of code samples that demonstrate basic interaction with the Adobe XD Cloud Content APIs. Node.js Example A complete Node.js-based web app example that uses Adobe XD Cloud Content APIs. See the readme. Python Example A complete Python-based web app example that uses Adobe XD Cloud Content APIs. See the readme. "},"reference/best-practices.html":{"url":"reference/best-practices.html","title":"Secret handling best practices","keywords":"","body":"Token Handling Best Practices The below security checklist is a general guidance to all integrations using Adobe IMS authorization to access private XD artefacts. There could be other security requirements for your integration depending upon your design. Security Checklist Client Side Server Side Use state parameter to prevent CSRF attack Do not log IMS tokens in logs Do not pass tokens in query string Never include your IMS client secret and permanent auth code in source code; Store them in a secure secret management system. Avoid storing access token and user profile in browser’s local storage Encrypt refresh/access token while storing them on the server side Ensure tokens are sent over TLS (HTTPS) Use latest version of IMS APIs Logging If you need to log IMS tokens for debugging purpose then you should remove the signature part from the token which makes it invalid. The token format is HEADER.PAYLOAD.SIGNATURE. Alternatively, you could log the decoded JSON payload which is search friendly. Keep in mind access token might contain PII data. Talk to Legal researcher/team to come up with the right strategy. Client side token storage Avoid storing IMS user access token in browser cookie. Use browser's session storage to persist any sensitive data. If you are using IMS javascript library then the access token and profile information will already be stored in session storage for you. If you are storing IMS access token in cookie and using it as session cookie then you need to make sure to Implement CSRF protection Set 'Secure' flag to the cookie. This instructs the browser to send the cookie information only over HTTPS. Set 'HTTPOnly' flag if you are setting the cookie using server side code. Server side token storage Application might have to store access token or refresh token on the server side for certain use case or while using refresh token grant type. Refresh token and access token must be kept confidential in transit and storage. The token should be encrypted by the application and stored in the database. (Do not use disk level encryption or transparent data encryption as they don't protect the tokens against SQL injection type attacks). Secret Storage If you have AdobeIO credentials in source code or accidentally committed them in your source code repository then you need to reach out to Adobe admins team to rotate the credentials. Make sure to store the new credentials in a secure secret management system. Rotation policy: General guidelines is to rotate the credential if it is leaked or person who had access to the credential left Adobe/team. "}}